#! /usr/bin/python3

"""
A file that supports using temci without being installed via pip3

Requires git and bash.
"""
import os
import sys
from os.path import dirname, abspath

base_dir = dirname(dirname(dirname(abspath(__file__))))
extra_dir = base_dir + "/extra"


def download_file(url: str, filename: str):
    """
    Download the file described by the passed url and store it in the "extra"
    directory in the temci base directory under the passed name.

    :param url: passed url
    :param filename: name of the downloaded file
    """
    dest = extra_dir + "/" + filename
    if os.path.exists(dest):
        return
    print("Download " + url)
    try:
        os.mkdir(extra_dir)
    except IOError:
        pass
    import urllib.request
    with urllib.request.urlopen(url) as response, open(dest, 'wb') as out_file:
        data = response.read() # a `bytes` object
        out_file.write(data)

def importable(module: str) -> bool:
    """ Is the module with the passed name importable? """
    try:
        __import__(module)
    except Exception as ex:
        return False
    return True


def clone(url: str, subdir: str, name: str):
    dest = "{}/{}".format(extra_dir, name)
    if os.path.exists(dest):
        return
    print("Clone " + url)
    os.system("rm -fr {}/_tmp".format(extra_dir))
    os.system("git clone {} {}/_tmp".format(url, extra_dir))
    os.system("rm -fr {}/{}".format(extra_dir, name))
    os.rename("{}/_tmp/{}".format(extra_dir, subdir), dest)
    os.system("rm -fr {}/_tmp".format(extra_dir))

if not importable("typing"):
    download_file("https://raw.githubusercontent.com/python/typing/master/src/typing.py",
                  "typing.py")
if not importable("rainbow_logging_handler"):
    download_file("https://raw.githubusercontent.com/laysakura/rainbow_logging_handler/master/rainbow_logging_handler/__init__.py",
                  "rainbow_logging_handler.py")
if not importable("click"):
    clone("https://github.com/pallets/click", "click", "click")
if not importable("cpuset"):
    clone("https://github.com/parttimenerd/cpuset", "cpuset", "cpuset")
if not importable("pytimeparse"):
    clone("https://github.com/wroberts/pytimeparse", "pytimeparse", "pytimeparse")
if not importable("humanfriendly"):
    clone("https://github.com/xolox/python-humanfriendly", "humanfriendly", "humanfriendly")
if not importable("future"):
    clone("https://github.com/PythonCharmers/python-future", "src/future", "future")
if not importable("yaml") and not importable("pureyaml"):
    clone("https://github.com/bionikspoon/pureyaml", "pureyaml", "pureyaml")
    clone("https://github.com/dabeaz/ply", "ply", "pureyaml/ply")

sys.path.append(base_dir)
sys.path.append(extra_dir)

from temci.utils import util
util.in_standalone_mode = True

import temci.scripts.cli as cli
cli.cli_with_error_catching()
